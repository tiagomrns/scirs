name: Continuous Integration

on:
  push:
    branches: [ master, develop, 'release/*' ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Run daily performance regression tests at 02:00 UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Basic validation checks
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        
      - name: Check formatting
        run: cargo fmt -- --check
        
      - name: Check clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Check documentation
        run: cargo doc --no-deps --all-features
        
  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install cargo-audit
        run: cargo install cargo-audit
        
      - name: Run security audit
        run: cargo audit
        
      - name: Run dependency audit
        run: |
          if [ -f "scripts/dependency_audit.sh" ]; then
            chmod +x scripts/dependency_audit.sh
            ./scripts/dependency_audit.sh
          fi

  # Cross-platform testing matrix
  test:
    name: Test Suite
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, nightly]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: "${{ matrix.os }}-${{ matrix.rust }}"
          
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev gfortran
          
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openblas lapack
          
      - name: Install cargo-nextest
        run: cargo install cargo-nextest
        
      - name: Build
        run: cargo build --verbose --all-features
        
      - name: Run tests with nextest
        run: cargo nextest run --all-features --verbose
        
      - name: Run doc tests
        run: cargo test --doc --all-features
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.rust }}
          path: target/nextest/default/

  # Performance benchmarking and regression detection
  performance:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for regression analysis
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev gfortran valgrind
          
      - name: Install cargo tools
        run: |
          cargo install cargo-criterion
          cargo install cargo-flamegraph
          
      - name: Run performance benchmarks
        run: |
          # Run comprehensive benchmarking suite
          cargo run --release --example comprehensive_benchmarking_example
          
      - name: Run memory profiling
        run: |
          # Run memory leak detection
          cargo run --release --example memory_leak_detector_demo
          
      - name: Performance regression analysis
        run: |
          # Run regression analysis if baseline exists
          if [ -f "performance_baselines/baseline.json" ]; then
            cargo run --release --example comprehensive_ci_cd_integration
          fi
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: |
            target/criterion/
            performance_results/
            memory_profiles/

  # Memory leak detection
  memory-safety:
    name: Memory Safety Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        
      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind libblas-dev liblapack-dev
          
      - name: Install cargo-valgrind
        run: cargo install cargo-valgrind
        
      - name: Run memory safety tests
        run: |
          # Run comprehensive memory leak detection
          cargo run --release --example comprehensive_memory_profiler
          
      - name: Run valgrind checks
        run: |
          # Run key optimizers under valgrind
          cargo valgrind run --example adam_scheduler
          cargo valgrind run --example sgd_example
          
      - name: Upload memory analysis
        uses: actions/upload-artifact@v4
        with:
          name: memory-analysis
          path: |
            memory_analysis/
            valgrind_reports/

  # Cross-platform compatibility
  compatibility:
    name: Cross-Platform Compatibility
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Setup cross-compilation (ARM64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
      - name: Build for target
        run: cargo build --target ${{ matrix.target }} --release
        
      - name: Run cross-platform tests
        if: matrix.target == runner.arch
        run: |
          cargo run --release --example cross_platform_compatibility_test
          
      - name: Upload compatibility results
        uses: actions/upload-artifact@v4
        with:
          name: compatibility-${{ matrix.target }}
          path: compatibility_results/

  # Integration testing with ML frameworks
  integration:
    name: Framework Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev
          
      - name: Test Burn integration
        run: |
          cargo run --release --example burn_integration
          cargo run --release --example advanced_burn_integration
          
      - name: Test Candle integration
        run: |
          cargo run --release --example candle_integration
          cargo run --release --example advanced_candle_integration
          
      - name: Test framework-agnostic integration
        run: |
          cargo run --release --example framework_agnostic_integration
          
      - name: Upload integration results
        uses: actions/upload-artifact@v4
        with:
          name: integration-results
          path: integration_results/

  # Security analysis
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Run security audit
        run: |
          cargo run --release --example security_audit_demo
          
      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis
          path: security_audit_report.md

  # Generate comprehensive CI report
  report:
    name: Generate CI Report
    runs-on: ubuntu-latest
    needs: [check, security, test, performance, memory-safety, compatibility, integration, security-analysis]
    if: always()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ci-artifacts/
          
      - name: Generate comprehensive report
        run: |
          python scripts/generate_ci_report.py ci-artifacts/ > ci-report.md
          
      - name: Upload CI report
        uses: actions/upload-artifact@v4
        with:
          name: ci-report
          path: ci-report.md
          
      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('ci-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## CI Report\n\n${report}`
            });