name: Security Audit

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run security audit daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      audit_level:
        description: 'Security audit level'
        required: false
        default: 'full'
        type: choice
        options:
          - lightweight
          - full
          - comprehensive

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        audit-type: [dependency-scan, static-analysis, secrets-scan, comprehensive]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy, rustfmt
    
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-security-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-security-
          ${{ runner.os }}-cargo-
    
    - name: Install security tools
      run: |
        # Install cargo-audit for dependency vulnerability scanning
        cargo install cargo-audit --force
        
        # Install cargo-deny for dependency policy enforcement
        cargo install cargo-deny --force
        
        # Install clippy for static analysis
        rustup component add clippy
        
        # Install gitleaks for secret scanning
        wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
        tar -xzf gitleaks.tar.gz
        sudo mv gitleaks /usr/local/bin/
        
        # Install semgrep for additional static analysis
        pip install semgrep
    
    - name: Run RustSec Advisory Database Update
      run: |
        cargo audit --version
        # Update advisory database
        cargo audit fetch
    
    - name: Dependency Vulnerability Scan
      if: matrix.audit-type == 'dependency-scan' || matrix.audit-type == 'comprehensive'
      run: |
        echo "=== Dependency Vulnerability Scanning ==="
        
        # Run cargo-audit for known vulnerabilities
        cargo audit --deny warnings --ignore RUSTSEC-0000-0000 || echo "Vulnerabilities found"
        
        # Run cargo-deny for policy enforcement
        if [ -f "deny.toml" ]; then
          cargo deny check
        else
          echo "No deny.toml found, creating basic configuration..."
          cat > deny.toml << 'EOF'
        [graph]
        all-features = true
        
        [advisories]
        db-path = "~/.cargo/advisory-db"
        db-urls = ["https://github.com/rustsec/advisory-db"]
        vulnerability = "deny"
        unmaintained = "warn"
        yanked = "warn"
        notice = "warn"
        
        [licenses]
        allow = [
          "MIT",
          "Apache-2.0",
          "Apache-2.0 WITH LLVM-exception",
          "BSD-2-Clause",
          "BSD-3-Clause",
          "ISC",
          "Unicode-DFS-2016",
        ]
        
        [bans]
        multiple-versions = "warn"
        wildcards = "allow"
        highlight = "all"
        workspace-default-features = "allow"
        external-default-features = "allow"
        
        [sources]
        unknown-registry = "warn"
        unknown-git = "warn"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        EOF
          cargo deny check
        fi
        
        # Generate dependency report
        cargo tree --duplicates > dependency-duplicates.txt || true
        cargo tree --edges normal,build,dev > dependency-tree.txt || true
    
    - name: Static Analysis Security Scan
      if: matrix.audit-type == 'static-analysis' || matrix.audit-type == 'comprehensive'
      run: |
        echo "=== Static Analysis Security Scanning ==="
        
        # Run Clippy with security-focused lints
        cargo clippy --all-targets --all-features -- \
          -W clippy::unwrap_used \
          -W clippy::expect_used \
          -W clippy::panic \
          -W clippy::unimplemented \
          -W clippy::todo \
          -W clippy::integer_overflow \
          -W clippy::indexing_slicing \
          -W clippy::float_cmp \
          -W clippy::lossy_float_literal \
          -W clippy::mem_forget \
          -W clippy::mem_replace_with_uninit \
          -W clippy::missing_safety_doc \
          -W clippy::undocumented_unsafe_blocks \
          -W clippy::multiple_unsafe_ops_per_block \
          -A clippy::too_many_arguments \
          2>&1 | tee clippy-security-report.txt
        
        # Run semgrep security rules
        semgrep --config=auto --json --output=semgrep-report.json . || true
        
        # Custom security pattern scanning
        echo "Scanning for potential security issues..."
        grep -r -n "unsafe" --include="*.rs" . > unsafe-usage.txt || true
        grep -r -n -i "password\|secret\|token\|key" --include="*.rs" . > potential-secrets.txt || true
        grep -r -n "unwrap()\|expect(" --include="*.rs" . > panic-potential.txt || true
    
    - name: Secret Scanning
      if: matrix.audit-type == 'secrets-scan' || matrix.audit-type == 'comprehensive'
      run: |
        echo "=== Secret Scanning ==="
        
        # Run gitleaks for secret detection
        gitleaks detect --source . --verbose --report-format json --report-path gitleaks-report.json || echo "Potential secrets found"
        
        # Additional secret patterns
        echo "Scanning for hardcoded secrets..."
        find . -name "*.rs" -type f -exec grep -l -E "(password|secret|token|api_key|private_key|access_key|auth_token|bearer|jwt)" {} \; > potential-secret-files.txt || true
        
        # Check for environment variables in code
        find . -name "*.rs" -type f -exec grep -l -E "env::var|std::env::var" {} \; > env-var-usage.txt || true
    
    - name: License Compliance Check
      if: matrix.audit-type == 'comprehensive'
      run: |
        echo "=== License Compliance Check ==="
        
        # Generate license report
        cargo tree --format "{p} {l}" | sort | uniq > licenses.txt
        
        # Check for non-permissive licenses
        grep -v -E "(MIT|Apache-2.0|BSD|ISC|Unicode-DFS-2016)" licenses.txt > non-permissive-licenses.txt || true
        
        # Count license types
        echo "License summary:"
        cut -d' ' -f2- licenses.txt | sort | uniq -c
    
    - name: Supply Chain Analysis
      if: matrix.audit-type == 'comprehensive'
      run: |
        echo "=== Supply Chain Analysis ==="
        
        # Check for dependencies from non-standard registries
        cargo metadata --format-version 1 | jq -r '.packages[] | select(.source != null and (.source | startswith("registry+https://github.com/rust-lang/crates.io-index") | not)) | .name + " " + .source' > non-standard-sources.txt || true
        
        # Check for git dependencies
        cargo metadata --format-version 1 | jq -r '.packages[] | select(.source != null and (.source | startswith("git+"))) | .name + " " + .source' > git-dependencies.txt || true
        
        # Check for yanked crates
        cargo metadata --format-version 1 | jq -r '.packages[] | select(.yanked == true) | .name + " " + .version' > yanked-crates.txt || true
    
    - name: Run Comprehensive Security Auditor
      if: matrix.audit-type == 'comprehensive'
      run: |
        echo "=== Running Comprehensive Security Auditor ==="
        
        # Build the security auditor tool
        cargo build --release --bin comprehensive-security-audit 2>/dev/null || echo "Security auditor binary not found, running as library"
        
        # Run comprehensive security audit via test
        cargo test --release comprehensive_security_audit_integration -- --nocapture || echo "Audit completed with findings"
    
    - name: Generate Security Report
      if: always()
      run: |
        echo "=== Generating Security Report ==="
        
        cat > security-report.md << 'EOF'
        # Security Audit Report
        
        **Date:** $(date)  
        **Audit Type:** ${{ matrix.audit-type }}  
        **Repository:** ${{ github.repository }}  
        **Branch:** ${{ github.ref_name }}  
        **Commit:** ${{ github.sha }}  
        
        ## Summary
        
        This report contains the results of automated security scanning for the repository.
        
        ## Dependency Vulnerabilities
        EOF
        
        if [ -f "dependency-duplicates.txt" ]; then
          echo "### Duplicate Dependencies" >> security-report.md
          echo '```' >> security-report.md
          cat dependency-duplicates.txt >> security-report.md
          echo '```' >> security-report.md
        fi
        
        if [ -f "clippy-security-report.txt" ]; then
          echo "### Static Analysis Issues" >> security-report.md
          echo '```' >> security-report.md
          tail -50 clippy-security-report.txt >> security-report.md
          echo '```' >> security-report.md
        fi
        
        if [ -f "gitleaks-report.json" ] && [ -s "gitleaks-report.json" ]; then
          echo "### Secret Scanning Results" >> security-report.md
          echo '```json' >> security-report.md
          cat gitleaks-report.json >> security-report.md
          echo '```' >> security-report.md
        fi
        
        if [ -f "non-permissive-licenses.txt" ] && [ -s "non-permissive-licenses.txt" ]; then
          echo "### Non-Permissive Licenses" >> security-report.md
          echo '```' >> security-report.md
          cat non-permissive-licenses.txt >> security-report.md
          echo '```' >> security-report.md
        fi
        
        if [ -f "git-dependencies.txt" ] && [ -s "git-dependencies.txt" ]; then
          echo "### Git Dependencies" >> security-report.md
          echo '```' >> security-report.md
          cat git-dependencies.txt >> security-report.md
          echo '```' >> security-report.md
        fi
        
        echo "## Recommendations" >> security-report.md
        echo "" >> security-report.md
        echo "1. Regularly update dependencies to latest secure versions" >> security-report.md
        echo "2. Review and audit any git dependencies or non-standard sources" >> security-report.md
        echo "3. Remove or secure any hardcoded secrets found" >> security-report.md
        echo "4. Address static analysis findings, especially security-related ones" >> security-report.md
        echo "5. Ensure all unsafe code is properly documented and reviewed" >> security-report.md
        
        # Create summary for GitHub Actions
        echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Audit Type:** ${{ matrix.audit-type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Findings:** Check uploaded artifacts for detailed results" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "gitleaks-report.json" ] && [ -s "gitleaks-report.json" ]; then
          echo "- **⚠️ Potential secrets detected**" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "non-permissive-licenses.txt" ] && [ -s "non-permissive-licenses.txt" ]; then
          echo "- **⚠️ Non-permissive licenses found**" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -f "git-dependencies.txt" ] && [ -s "git-dependencies.txt" ]; then
          echo "- **ℹ️ Git dependencies detected**" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload Security Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-audit-${{ matrix.audit-type }}-${{ github.run_number }}
        path: |
          security-report.md
          clippy-security-report.txt
          semgrep-report.json
          gitleaks-report.json
          dependency-*.txt
          licenses.txt
          potential-*.txt
          unsafe-usage.txt
          panic-potential.txt
          non-*.txt
          git-dependencies.txt
          yanked-crates.txt
        retention-days: 30
    
    - name: Comment PR with Security Findings
      if: github.event_name == 'pull_request' && matrix.audit-type == 'comprehensive'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔒 Security Audit Results\n\n';
          comment += `**Audit completed for commit:** ${context.sha.substring(0, 7)}\n\n`;
          
          // Check for critical findings
          let criticalFindings = false;
          
          if (fs.existsSync('gitleaks-report.json')) {
            const gitleaksContent = fs.readFileSync('gitleaks-report.json', 'utf8');
            if (gitleaksContent.trim().length > 0) {
              comment += '⚠️ **Potential secrets detected** - Review gitleaks report\n';
              criticalFindings = true;
            }
          }
          
          if (fs.existsSync('non-permissive-licenses.txt')) {
            const licensesContent = fs.readFileSync('non-permissive-licenses.txt', 'utf8');
            if (licensesContent.trim().length > 0) {
              comment += '⚠️ **Non-permissive licenses found** - Review license compliance\n';
            }
          }
          
          if (fs.existsSync('git-dependencies.txt')) {
            const gitDepsContent = fs.readFileSync('git-dependencies.txt', 'utf8');
            if (gitDepsContent.trim().length > 0) {
              comment += 'ℹ️ **Git dependencies detected** - Consider using published crates\n';
            }
          }
          
          if (!criticalFindings) {
            comment += '✅ **No critical security issues detected**\n';
          }
          
          comment += '\n📊 **View detailed results in the uploaded artifacts**';
          
          // Post comment
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Fail on Critical Security Issues
      run: |
        echo "Checking for critical security issues..."
        
        # Fail if secrets are detected
        if [ -f "gitleaks-report.json" ] && [ -s "gitleaks-report.json" ]; then
          echo "❌ Critical: Secrets detected in repository"
          exit 1
        fi
        
        # Fail if high-severity vulnerabilities are found
        if cargo audit --deny warnings 2>&1 | grep -q "error:"; then
          echo "❌ Critical: High-severity vulnerabilities found"
          exit 1
        fi
        
        echo "✅ No critical security issues detected"

  notify-security-team:
    name: Notify Security Team
    needs: security-audit
    runs-on: ubuntu-latest
    if: failure() && (github.event_name == 'schedule' || github.event_name == 'push')
    
    steps:
    - name: Send Security Alert
      uses: actions/github-script@v6
      with:
        script: |
          // Create an issue for security findings
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Security Alert: Critical findings in automated audit`,
            body: `## Security Alert
          
          Critical security issues were detected during automated security scanning.
          
          **Details:**
          - **Workflow:** ${context.workflow}
          - **Run ID:** ${context.runId}
          - **Commit:** ${context.sha}
          - **Branch:** ${context.ref}
          - **Triggered by:** ${context.eventName}
          
          **Action Required:**
          1. Review the security audit artifacts from the failed workflow
          2. Address any critical vulnerabilities or exposed secrets
          3. Update dependencies with known security issues
          4. Close this issue after remediation
          
          **Artifact Link:** https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
          `,
            labels: ['security', 'critical', 'automated']
          });
          
          console.log(`Created security alert issue: ${issue.data.number}`);

  update-security-dashboard:
    name: Update Security Dashboard
    needs: security-audit
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule'
    
    steps:
    - name: Update Security Metrics
      run: |
        echo "📊 Updating security dashboard metrics..."
        
        # In a real implementation, this would:
        # 1. Parse security audit results
        # 2. Update security metrics database
        # 3. Generate security dashboard
        # 4. Send metrics to monitoring system
        
        echo "Security dashboard updated successfully"