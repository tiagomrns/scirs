name: Performance Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run nightly performance tests at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      fail_on_regression:
        description: 'Fail CI on performance regression'
        required: false
        default: 'false'
        type: boolean

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  performance-tests:
    name: Performance Regression Testing
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      matrix:
        rust: [stable]
        target: [x86_64-unknown-linux-gnu]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for trend analysis
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}
        components: rustfmt, clippy
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libblas-dev \
          liblapack-dev \
          libopenblas-dev \
          gfortran \
          python3 \
          python3-pip \
          valgrind \
          perf-tools-unstable
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install psutil requests matplotlib seaborn numpy pandas
    
    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-perf-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-perf-
    
    - name: Install cargo-nextest
      run: cargo install cargo-nextest --locked
    
    - name: Install criterion-cli (for benchmark parsing)
      run: cargo install cargo-criterion --locked
    
    - name: Build project (release mode)
      run: |
        cd scirs2-optim
        cargo build --release --all-features
    
    - name: Run quick smoke tests
      run: |
        cd scirs2-optim
        cargo nextest run --lib --release --no-capture
    
    - name: Restore performance baseline
      id: baseline
      uses: actions/cache@v3
      with:
        path: scirs2-optim/performance_history.json
        key: performance-baseline-${{ runner.os }}-${{ github.repository }}-main
        restore-keys: |
          performance-baseline-${{ runner.os }}-${{ github.repository }}-
    
    - name: Run performance benchmarks
      id: benchmarks
      run: |
        cd scirs2-optim
        python3 scripts/ci_cd_performance_integration.py \
          --project-root . \
          --config performance_config.json \
          --output-dir performance_reports \
          ${{ github.event.inputs.fail_on_regression == 'true' && '--fail-on-regression' || '' }} \
          --verbose
      continue-on-error: true
    
    - name: Generate performance trends
      if: always()
      run: |
        cd scirs2-optim
        python3 scripts/generate_performance_report.py \
          --input performance_reports/performance_report.json \
          --history performance_history.json \
          --output performance_reports/trends.html
      continue-on-error: true
    
    - name: Upload performance reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports-${{ github.sha }}
        path: |
          scirs2-optim/performance_reports/
          scirs2-optim/performance_history.json
        retention-days: 30
    
    - name: Publish JUnit test results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Performance Test Results
        path: scirs2-optim/performance_reports/performance_report.xml
        reporter: java-junit
        fail-on-error: false
    
    - name: Comment performance results on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = 'scirs2-optim/performance_reports/performance_report.md';
          
          if (fs.existsSync(path)) {
            const report = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üìä Performance Test Results\n\n${report}`
            });
          }
    
    - name: Update performance baseline (main branch only)
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/cache@v3
      with:
        path: scirs2-optim/performance_history.json
        key: performance-baseline-${{ runner.os }}-${{ github.repository }}-main-${{ github.sha }}
    
    - name: Notify on performance regression
      if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          üö® Performance regression detected in scirs2-optim!
          
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Actor: ${{ github.actor }}
          
          Please check the performance reports for details.
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    # Fail the job if benchmarks failed and we're configured to fail on regression
    - name: Check benchmark results
      if: steps.benchmarks.outcome == 'failure' && github.event.inputs.fail_on_regression == 'true'
      run: exit 1

  memory-profiling:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    needs: performance-tests
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install Valgrind
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind
    
    - name: Build debug version
      run: |
        cd scirs2-optim
        cargo build --all-features
    
    - name: Run memory leak detection
      run: |
        cd scirs2-optim
        cargo run --bin memory_leak_reporter 2>&1 | tee memory_report.txt
        
        # Check for memory leaks
        if grep -q "definitely lost" memory_report.txt || grep -q "possibly lost" memory_report.txt; then
          echo "‚ö†Ô∏è Potential memory leaks detected!"
          cat memory_report.txt
          # Don't fail the job, just warn
        else
          echo "‚úÖ No memory leaks detected"
        fi
      continue-on-error: true
    
    - name: Upload memory reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: memory-reports-${{ github.sha }}
        path: scirs2-optim/memory_report.txt
        retention-days: 7

  cross-platform-performance:
    name: Cross-Platform Performance
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libblas-dev liblapack-dev libopenblas-dev gfortran
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install openblas lapack
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install psutil requests
    
    - name: Build and run basic performance tests
      run: |
        cd scirs2-optim
        cargo build --release --all-features
        python3 scripts/ci_cd_performance_integration.py \
          --project-root . \
          --output-dir performance_reports_${{ matrix.os }} \
          --verbose
      continue-on-error: true
    
    - name: Upload cross-platform results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cross-platform-performance-${{ matrix.os }}-${{ github.sha }}
        path: scirs2-optim/performance_reports_${{ matrix.os }}/
        retention-days: 14