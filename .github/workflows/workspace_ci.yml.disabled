name: Workspace CI/CD

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily to catch any integration regressions
    - cron: '0 6 * * *'

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Workspace-level build validation
  workspace-build:
    name: Workspace Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        features: [
          "default",
          "full-features",
          "minimal"
        ]
        include:
          - os: ubuntu-latest
            deps: "sudo apt-get update && sudo apt-get install -y libopenblas-dev liblapack-dev gfortran"
          - os: macos-latest  
            deps: "brew install openblas lapack"
          - os: windows-latest
            deps: ""

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Install system dependencies
      if: matrix.deps != ''
      run: ${{ matrix.deps }}

    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest

    - name: Setup feature flags
      id: features
      shell: bash
      run: |
        case "${{ matrix.features }}" in
          "default")
            echo "flags=" >> $GITHUB_OUTPUT
            ;;
          "full-features")
            echo "flags=--all-features" >> $GITHUB_OUTPUT
            ;;
          "minimal")
            echo "flags=--no-default-features" >> $GITHUB_OUTPUT
            ;;
        esac

    - name: Build workspace
      run: cargo build ${{ steps.features.outputs.flags }}

    - name: Test workspace
      run: cargo nextest run ${{ steps.features.outputs.flags }}

    - name: Doc tests
      run: cargo test --doc ${{ steps.features.outputs.flags }}

  # Cross-module integration testing
  integration-tests:
    name: Cross-Module Integration
    runs-on: ubuntu-latest
    needs: workspace-build

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev gfortran
        cargo install cargo-nextest

    - name: Run integration tests
      run: |
        # Run cross-module integration tests
        cargo nextest run --tests cross_module_integration
        
        # Test specific module combinations
        cargo test --test cross_module_integration --features "scirs2-linalg,scirs2-stats"
        cargo test --test cross_module_integration --features "scirs2-neural,scirs2-optim"
        cargo test --test cross_module_integration --features "scirs2-ndimage,scirs2-signal"

    - name: Validate module compatibility
      run: |
        # Ensure all modules can be used together
        cargo check --all-features
        cargo check --features "scirs2-core,scirs2-linalg,scirs2-stats,scirs2-signal"

  # Code quality and linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy (workspace)
      run: |
        # Run clippy on entire workspace with zero warnings policy
        cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: |
        # Ensure all public APIs are documented
        RUSTDOCFLAGS="-D missing_docs -D rustdoc::broken_intra_doc_links" \
        cargo doc --workspace --all-features --no-deps

    - name: Dependency audit
      run: |
        cargo install cargo-audit
        cargo audit

  # Performance benchmarking
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev gfortran python3-pip
        pip3 install numpy scipy matplotlib

    - name: Run workspace benchmarks
      run: |
        # Run comprehensive workspace benchmarks
        mkdir -p benchmark_results
        
        # Core benchmarks
        cd scirs2-core && cargo bench --all-features
        
        # SciPy comparison benchmarks
        cd ../benches && bash run_performance_comparison.sh
        
        # Generate benchmark report
        python3 numpy_scipy_baseline.py > ../benchmark_results/scipy_comparison.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results/

  # Documentation generation
  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev
        cargo install mdbook

    - name: Generate API documentation
      run: |
        # Generate comprehensive workspace documentation
        cargo doc --workspace --all-features --no-deps
        
        # Generate book documentation
        if [ -f "book.toml" ]; then
          mdbook build
        fi

    - name: Generate module cross-references
      run: |
        # Create cross-reference documentation
        python3 scripts/generate_module_docs.py \
          --workspace-root . \
          --output docs/MODULE_CROSS_REFERENCE.md

    - name: Deploy documentation
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/master'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc

  # Security scanning
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install security tools
      run: |
        cargo install cargo-audit cargo-deny

    - name: Run security audit
      run: |
        # Comprehensive security audit
        cargo audit
        cargo deny check
        
        # Check for known vulnerabilities
        if [ -f "deny.toml" ]; then
          cargo deny check advisories
        fi

    - name: Workspace security scan
      run: |
        # Run workspace-specific security checks
        find . -name "Cargo.toml" -exec dirname {} \; | while read dir; do
          echo "Checking security in $dir"
          cd "$dir" && cargo audit || true
          cd - > /dev/null
        done

  # Release coordination
  release-validation:
    name: Release Validation
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Validate release
      run: |
        # Validate all modules are ready for release
        python3 scripts/validate_workspace_release.py
        
        # Check version consistency across workspace
        python3 scripts/check_version_consistency.py
        
        # Validate changelogs
        python3 scripts/validate_changelogs.py

    - name: Build release artifacts
      run: |
        # Build release versions of all modules
        cargo build --workspace --release --all-features
        
        # Package workspace documentation
        cargo doc --workspace --all-features --no-deps
        tar -czf workspace-docs.tar.gz target/doc/

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: workspace-release
        path: |
          target/release/
          workspace-docs.tar.gz

  # Notification and reporting
  report:
    name: CI Report
    runs-on: ubuntu-latest
    needs: [workspace-build, integration-tests, code-quality, performance-benchmarks, documentation, security]
    if: always()

    steps:
    - name: Generate CI report
      run: |
        echo "# SciRS2 Workspace CI Report" > ci_report.md
        echo "## Build Status" >> ci_report.md
        echo "- Workspace Build: ${{ needs.workspace-build.result }}" >> ci_report.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> ci_report.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> ci_report.md
        echo "- Performance: ${{ needs.performance-benchmarks.result }}" >> ci_report.md
        echo "- Documentation: ${{ needs.documentation.result }}" >> ci_report.md
        echo "- Security: ${{ needs.security.result }}" >> ci_report.md
        
        echo "## Summary" >> ci_report.md
        if [[ "${{ needs.workspace-build.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" && \
              "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ All critical checks passed" >> ci_report.md
        else
          echo "❌ Some checks failed - see details above" >> ci_report.md
        fi

    - name: Upload CI report
      uses: actions/upload-artifact@v4
      with:
        name: ci-report
        path: ci_report.md