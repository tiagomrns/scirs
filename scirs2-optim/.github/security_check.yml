# Security Check Workflow for scirs2-optim
# This workflow can be adapted for various CI systems (GitHub Actions, GitLab CI, etc.)

name: Security Audit

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run security audit weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch: # Allow manual triggering

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, 1.70.0] # Test on stable and MSRV
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for better security analysis
    
    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: clippy, rustfmt
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
    
    - name: Install security tools
      run: |
        cargo install cargo-audit --locked
        cargo install cargo-deny --locked
        cargo install cargo-outdated --locked
    
    - name: Check formatting
      run: cargo fmt --all -- --check
    
    - name: Lint with Clippy (security focus)
      run: |
        cargo clippy --all-targets --all-features -- \
          -D clippy::all \
          -D clippy::suspicious \
          -D clippy::perf \
          -D clippy::cargo \
          -D clippy::nursery \
          -W clippy::pedantic
    
    - name: Security vulnerability scan
      run: |
        # Update advisory database
        cargo audit --update
        # Run audit
        cargo audit --deny warnings
    
    - name: License compliance check
      run: |
        cargo deny check licenses
    
    - name: Dependency policy check
      run: |
        cargo deny check bans
        cargo deny check advisories
        cargo deny check sources
    
    - name: Check for outdated dependencies
      run: |
        cargo outdated --exit-code 1 || echo "Outdated dependencies found - see report above"
    
    - name: Build and test with security features
      run: |
        # Test core functionality
        cargo test --release
        # Test with all features
        cargo test --all-features --release
    
    - name: Run custom security audit script
      run: |
        chmod +x scripts/dependency_audit.sh
        ./scripts/dependency_audit.sh
    
    - name: Generate security report
      if: always()
      run: |
        echo "## Security Audit Report" > security_report.md
        echo "**Date:** $(date)" >> security_report.md
        echo "**Rust Version:** ${{ matrix.rust }}" >> security_report.md
        echo "**Commit:** ${{ github.sha }}" >> security_report.md
        echo "" >> security_report.md
        
        echo "### Vulnerability Scan Results" >> security_report.md
        cargo audit --format json > audit.json 2>/dev/null || echo "Audit failed" >> security_report.md
        
        echo "### Dependency Tree" >> security_report.md
        echo '```' >> security_report.md
        cargo tree --duplicates >> security_report.md 2>/dev/null || echo "No duplicates found" >> security_report.md
        echo '```' >> security_report.md
    
    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ matrix.rust }}
        path: |
          security_report.md
          audit.json
          security_audit_report.md
        retention-days: 30
    
    - name: Notify on security issues
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const issue_title = `ðŸš¨ Security Audit Failed - ${context.sha.substring(0, 7)}`;
          const issue_body = `
          ## Security Audit Failure
          
          **Workflow:** ${context.workflow}
          **Run ID:** ${context.runId}
          **Commit:** ${context.sha}
          **Rust Version:** ${{ matrix.rust }}
          
          A security audit has failed for this commit. Please review the workflow logs and address any security issues found.
          
          **Next Steps:**
          1. Review the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
          2. Check the security report artifacts
          3. Address any vulnerabilities or policy violations
          4. Re-run the security audit
          
          This issue will be automatically closed when the security audit passes.
          `;
          
          // Only create issue if it doesn't already exist
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'security'
          });
          
          const existingIssue = issues.find(issue => issue.title.includes(context.sha.substring(0, 7)));
          
          if (!existingIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issue_title,
              body: issue_body,
              labels: ['security', 'bug', 'high-priority']
            });
          }

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, Unicode-DFS-2016
        deny-licenses: GPL-2.0, GPL-3.0
    
  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
    
    - name: Verify package checksums
      run: |
        # Verify that Cargo.lock contains expected checksums
        cargo fetch --locked
    
    - name: Check for supply chain attacks
      run: |
        # Basic supply chain security checks
        echo "Checking for suspicious patterns in dependencies..."
        
        # Check for typosquatting (basic check)
        cargo tree --format "{p}" | grep -i "serde" | grep -v "^serde " | grep -v "serde_" || echo "No typosquatting detected for serde"
        cargo tree --format "{p}" | grep -i "tokio" | grep -v "^tokio " | grep -v "tokio-" || echo "No typosquatting detected for tokio"
        
        # Check for excessive dependencies from single maintainer
        echo "Dependency maintainer analysis would go here..."
    
    - name: SBOM Generation
      run: |
        # Generate Software Bill of Materials
        echo "Generating SBOM..."
        cargo tree --format "{p} {l}" > sbom.txt
        echo "SBOM generated: sbom.txt"
    
    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.txt