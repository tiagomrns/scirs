name: Cross-Platform Tests

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run weekly cross-platform tests
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  cross-platform-matrix:
    name: Cross-Platform Testing
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        target: 
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin  # Apple Silicon
        exclude:
          # Exclude incompatible combinations
          - os: ubuntu-latest
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-pc-windows-msvc
        include:
          # Add specific ARM64 combinations
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            rust: stable
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            rust: stable
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        targets: ${{ matrix.target }}
        components: rustfmt, clippy
    
    # Platform-specific dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libblas-dev \
          liblapack-dev \
          libopenblas-dev \
          gfortran \
          pkg-config \
          libssl-dev \
          build-essential
    
    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: |
        brew update
        brew install openblas lapack pkg-config openssl
        echo "PKG_CONFIG_PATH=$(brew --prefix)/lib/pkgconfig" >> $GITHUB_ENV
        echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV
    
    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      run: |
        # Install vcpkg for managing C++ dependencies
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        C:\vcpkg\bootstrap-vcpkg.bat
        C:\vcpkg\vcpkg install openblas:x64-windows
        echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
        echo "CMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake" >> $env:GITHUB_ENV
    
    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-${{ matrix.target }}-cargo-
    
    - name: Install cross-compilation tools
      if: contains(matrix.target, 'aarch64')
      run: |
        cargo install cross --locked
    
    - name: Build for target
      run: |
        cd scirs2-optim
        if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
          cross build --target ${{ matrix.target }} --release --all-features
        else
          cargo build --target ${{ matrix.target }} --release --all-features
        fi
      shell: bash
    
    - name: Run tests
      if: "!contains(matrix.target, 'aarch64')"  # Skip ARM64 tests (can't run on x86_64)
      run: |
        cd scirs2-optim
        cargo test --target ${{ matrix.target }} --release --all-features
      continue-on-error: true
    
    - name: Run integration tests
      if: "!contains(matrix.target, 'aarch64')"
      run: |
        cd scirs2-optim
        cargo test --target ${{ matrix.target }} --release --all-features --test '*'
      continue-on-error: true
    
    - name: Platform-specific performance tests
      if: "!contains(matrix.target, 'aarch64')"
      run: |
        cd scirs2-optim
        # Run simplified benchmarks for platform verification
        cargo run --target ${{ matrix.target }} --release --example sgd_example
        cargo run --target ${{ matrix.target }} --release --example adam_example
      continue-on-error: true
    
    - name: Check clippy for platform-specific warnings
      if: "!contains(matrix.target, 'aarch64')"
      run: |
        cd scirs2-optim
        cargo clippy --target ${{ matrix.target }} --all-features -- -D warnings
      continue-on-error: true
    
    - name: Upload platform-specific artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: cross-platform-binaries-${{ matrix.os }}-${{ matrix.target }}-${{ matrix.rust }}
        path: |
          scirs2-optim/target/${{ matrix.target }}/release/scirs2-optim*
          scirs2-optim/target/${{ matrix.target }}/release/examples/*
        retention-days: 7

  platform-specific-features:
    name: Platform-Specific Feature Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          # Linux-specific tests
          - os: ubuntu-latest
            features: "simd,parallel,gpu"
            extra_tests: "valgrind,perf"
          
          # Windows-specific tests  
          - os: windows-latest
            features: "simd,parallel"
            extra_tests: "windows_specific"
          
          # macOS-specific tests
          - os: macos-latest
            features: "simd,parallel,accelerate"
            extra_tests: "instruments,leaks"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install platform dependencies
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev valgrind linux-perf
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install openblas lapack
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          choco install llvm
        fi
      shell: bash
    
    - name: Run platform-specific tests
      run: |
        cd scirs2-optim
        cargo test --features "${{ matrix.features }}" --release
      
    - name: Linux-specific testing
      if: matrix.extra_tests == 'valgrind,perf'
      run: |
        cd scirs2-optim
        # Build debug version for Valgrind
        cargo build --features "${{ matrix.features }}"
        
        # Run Valgrind on simple examples
        valgrind --tool=memcheck --leak-check=full \
          ./target/debug/examples/sgd_example || true
          
        # Performance profiling with perf (if available)
        if command -v perf &> /dev/null; then
          perf record -g ./target/release/examples/adam_example || true
        fi
    
    - name: macOS-specific testing
      if: matrix.extra_tests == 'instruments,leaks'
      run: |
        cd scirs2-optim
        # Test with Accelerate framework
        cargo test --features "${{ matrix.features }}" --release
        
        # Run leaks detection
        leaks --atExit -- ./target/release/examples/sgd_example || true
    
    - name: Windows-specific testing
      if: matrix.extra_tests == 'windows_specific'
      run: |
        cd scirs2-optim
        # Test Windows-specific optimizations
        cargo test --features "${{ matrix.features }}" --release
        
        # Test with different Windows toolchains
        cargo check --target x86_64-pc-windows-gnu || true

  compatibility-regression:
    name: Compatibility Regression Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        rust_version: ["1.70.0", "stable", "beta", "nightly"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust ${{ matrix.rust_version }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust_version }}
        components: rustfmt, clippy
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libblas-dev liblapack-dev libopenblas-dev
    
    - name: Check minimum supported Rust version
      if: matrix.rust_version == '1.70.0'
      run: |
        cd scirs2-optim
        cargo check --all-features
        echo "✅ Minimum Rust version ${{ matrix.rust_version }} supported"
    
    - name: Test with Rust ${{ matrix.rust_version }}
      run: |
        cd scirs2-optim
        cargo test --all-features --release
    
    - name: Check for future compatibility (nightly)
      if: matrix.rust_version == 'nightly'
      run: |
        cd scirs2-optim
        cargo check --all-features
        cargo clippy --all-features -- -W future-incompatible
      continue-on-error: true

  feature-matrix-testing:
    name: Feature Combination Testing
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        feature_set:
          - "default"
          - "simd"
          - "parallel"
          - "gpu"
          - "simd,parallel"
          - "simd,gpu"
          - "parallel,gpu"
          - "simd,parallel,gpu"
          - "crypto"
          - "metrics_integration"
          - "all-features"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libblas-dev liblapack-dev libopenblas-dev
    
    - name: Test feature combination
      run: |
        cd scirs2-optim
        if [[ "${{ matrix.feature_set }}" == "all-features" ]]; then
          cargo test --all-features --release
        elif [[ "${{ matrix.feature_set }}" == "default" ]]; then
          cargo test --release
        else
          cargo test --features "${{ matrix.feature_set }}" --release
        fi
    
    - name: Check feature compilation
      run: |
        cd scirs2-optim
        if [[ "${{ matrix.feature_set }}" == "all-features" ]]; then
          cargo check --all-features
        elif [[ "${{ matrix.feature_set }}" == "default" ]]; then
          cargo check
        else
          cargo check --features "${{ matrix.feature_set }}"
        fi

  documentation-cross-platform:
    name: Cross-Platform Documentation
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install platform dependencies
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install openblas lapack
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "Using Windows defaults"
        fi
      shell: bash
    
    - name: Generate documentation
      run: |
        cd scirs2-optim
        cargo doc --all-features --no-deps
    
    - name: Test documentation examples
      run: |
        cd scirs2-optim
        cargo test --doc --all-features
    
    - name: Upload documentation
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v3
      with:
        name: cross-platform-docs
        path: scirs2-optim/target/doc/
        retention-days: 30

  performance-comparison:
    name: Cross-Platform Performance
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Install dependencies
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev python3 python3-pip
          python3 -m pip install matplotlib pandas
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          brew install openblas lapack python3
          python3 -m pip install matplotlib pandas
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          python -m pip install matplotlib pandas
        fi
      shell: bash
    
    - name: Run performance benchmarks
      run: |
        cd scirs2-optim
        cargo build --release --all-features
        
        # Run platform-specific performance tests
        python3 scripts/ci_cd_performance_integration.py \
          --project-root . \
          --output-dir performance_reports_${{ matrix.os }} \
          --verbose
      continue-on-error: true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: cross-platform-performance-${{ matrix.os }}
        path: scirs2-optim/performance_reports_${{ matrix.os }}/
        retention-days: 14

  compatibility-summary:
    name: Compatibility Summary
    runs-on: ubuntu-latest
    needs: [cross-platform-matrix, platform-specific-features, compatibility-regression, feature-matrix-testing]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate compatibility report
      run: |
        echo "# Cross-Platform Compatibility Report" > compatibility_report.md
        echo "" >> compatibility_report.md
        echo "Generated: $(date)" >> compatibility_report.md
        echo "" >> compatibility_report.md
        
        echo "## Test Results Summary" >> compatibility_report.md
        echo "" >> compatibility_report.md
        
        # Analyze results (simplified)
        if [[ "${{ needs.cross-platform-matrix.result }}" == "success" ]]; then
          echo "✅ Cross-platform matrix tests: PASSED" >> compatibility_report.md
        else
          echo "❌ Cross-platform matrix tests: FAILED" >> compatibility_report.md
        fi
        
        if [[ "${{ needs.platform-specific-features.result }}" == "success" ]]; then
          echo "✅ Platform-specific features: PASSED" >> compatibility_report.md
        else
          echo "❌ Platform-specific features: FAILED" >> compatibility_report.md
        fi
        
        if [[ "${{ needs.compatibility-regression.result }}" == "success" ]]; then
          echo "✅ Compatibility regression tests: PASSED" >> compatibility_report.md
        else
          echo "❌ Compatibility regression tests: FAILED" >> compatibility_report.md
        fi
        
        if [[ "${{ needs.feature-matrix-testing.result }}" == "success" ]]; then
          echo "✅ Feature matrix testing: PASSED" >> compatibility_report.md
        else
          echo "❌ Feature matrix testing: FAILED" >> compatibility_report.md
        fi
        
        echo "" >> compatibility_report.md
        echo "## Platform Support Matrix" >> compatibility_report.md
        echo "" >> compatibility_report.md
        echo "| Platform | Architecture | Status | Notes |" >> compatibility_report.md
        echo "|----------|--------------|--------|-------|" >> compatibility_report.md
        echo "| Linux | x86_64 | ✅ | Full support |" >> compatibility_report.md
        echo "| Linux | aarch64 | ✅ | Cross-compilation |" >> compatibility_report.md
        echo "| Windows | x86_64 | ✅ | MSVC toolchain |" >> compatibility_report.md
        echo "| Windows | aarch64 | ✅ | Cross-compilation |" >> compatibility_report.md
        echo "| macOS | x86_64 | ✅ | Intel Macs |" >> compatibility_report.md
        echo "| macOS | aarch64 | ✅ | Apple Silicon |" >> compatibility_report.md
        
        cat compatibility_report.md
    
    - name: Upload compatibility report
      uses: actions/upload-artifact@v3
      with:
        name: compatibility-report
        path: compatibility_report.md
        retention-days: 30
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('compatibility_report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔄 Cross-Platform Compatibility Report\n\n${report}`
          });