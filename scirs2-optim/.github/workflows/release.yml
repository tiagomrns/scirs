name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0-beta.2)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: true
        type: boolean
        default: true

env:
  CARGO_TERM_COLOR: always

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
      is_prerelease: ${{ steps.extract_version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Extract version info
        id: extract_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if version contains beta, alpha, rc, etc.
            if [[ "$VERSION" =~ (alpha|beta|rc|pre) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION (prerelease: $IS_PRERELEASE)"
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Validate version format
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v0.1.0 or v0.1.0-beta.1"
            exit 1
          fi
          
      - name: Check Cargo.toml version
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          EXPECTED_VERSION="${VERSION#v}"  # Remove 'v' prefix
          
          if [ "$CARGO_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "Version mismatch!"
            echo "Cargo.toml version: $CARGO_VERSION"
            echo "Tag version: $EXPECTED_VERSION"
            exit 1
          fi
          
      - name: Validate changelog
        run: |
          VERSION="${{ steps.extract_version.outputs.version }}"
          if [ -f "CHANGELOG.md" ] && ! grep -q "$VERSION" CHANGELOG.md; then
            echo "Warning: Version $VERSION not found in CHANGELOG.md"
          fi

  comprehensive-testing:
    name: Comprehensive Release Testing
    runs-on: ubuntu-latest
    needs: validate-release
    
    strategy:
      matrix:
        rust: [stable, beta]
        features: ["default", "simd", "parallel", "gpu", "all"]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          
      - name: Setup feature flags
        id: features
        run: |
          case "${{ matrix.features }}" in
            "default")
              echo "flags=" >> $GITHUB_OUTPUT
              ;;
            "simd")
              echo "flags=--features simd" >> $GITHUB_OUTPUT
              ;;
            "parallel")
              echo "flags=--features parallel" >> $GITHUB_OUTPUT
              ;;
            "gpu")
              echo "flags=--features gpu" >> $GITHUB_OUTPUT
              ;;
            "all")
              echo "flags=--all-features" >> $GITHUB_OUTPUT
              ;;
          esac
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev gfortran
          
      - name: Install cargo-nextest
        run: cargo install cargo-nextest
        
      - name: Build release
        run: cargo build --release ${{ steps.features.outputs.flags }}
        
      - name: Run comprehensive tests
        run: |
          cargo nextest run --release ${{ steps.features.outputs.flags }}
          cargo test --doc --release ${{ steps.features.outputs.flags }}
          
      - name: Run examples
        run: |
          # Test key examples work in release mode
          cargo run --release --example sgd_example ${{ steps.features.outputs.flags }}
          cargo run --release --example adam_scheduler ${{ steps.features.outputs.flags }}
          cargo run --release --example comprehensive_benchmarking_example ${{ steps.features.outputs.flags }}

  cross-platform-release:
    name: Cross-Platform Release Build
    needs: [validate-release, comprehensive-testing]
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-arm64
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Setup cross-compilation (ARM64 Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev gfortran
          
      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install openblas lapack
          
      - name: Build release for target
        run: |
          cargo build --release --target ${{ matrix.target }} --all-features
          
      - name: Package release artifacts
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          mkdir -p release-artifacts
          
          # Create release package
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ARCHIVE_NAME="scirs2-optim-$VERSION-${{ matrix.name }}.zip"
            # Package Windows binary
            cd target/${{ matrix.target }}/release
            7z a "../../../release-artifacts/$ARCHIVE_NAME" *.exe *.dll 2>/dev/null || true
          else
            ARCHIVE_NAME="scirs2-optim-$VERSION-${{ matrix.name }}.tar.gz"
            # Package Unix binary
            cd target/${{ matrix.target }}/release
            tar -czf "../../../release-artifacts/$ARCHIVE_NAME" scirs2-optim* 2>/dev/null || true
          fi
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.name }}
          path: release-artifacts/

  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libblas-dev liblapack-dev gfortran
          
      - name: Run performance validation
        run: |
          # Run comprehensive performance validation for release
          mkdir -p release_performance
          
          cargo run --release --example comprehensive_benchmarking_example \
            --all-features \
            -- --release-validation --output release_performance/
          
      - name: Performance regression check
        run: |
          # Check for any performance regressions in release
          if [ -f "performance_baselines/release_baseline.json" ]; then
            cargo run --release --example comprehensive_ci_cd_integration \
              -- --release-regression-check \
                 --baseline performance_baselines/release_baseline.json \
                 --current release_performance/results.json \
                 --threshold 2.0
          fi
          
      - name: Upload performance validation
        uses: actions/upload-artifact@v4
        with:
          name: release-performance-validation
          path: release_performance/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install security tools
        run: |
          cargo install cargo-audit
          cargo install cargo-deny
          
      - name: Run security audit
        run: |
          # Comprehensive security audit for release
          cargo audit
          cargo deny check
          
      - name: Run custom security analysis
        run: |
          # Run custom security audit
          cargo run --release --example security_audit_demo \
            -- --comprehensive --output security_audit_release.json
          
      - name: Upload security audit
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: |
            security_audit_release.json
            security_audit_report.md

  documentation:
    name: Generate Release Documentation
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install documentation tools
        run: |
          cargo install mdbook
          cargo install cargo-readme
          
      - name: Generate documentation
        run: |
          # Generate comprehensive release documentation
          cargo doc --all-features --no-deps
          
          # Generate README from lib.rs
          cargo readme > README_generated.md
          
          # Generate API documentation
          mkdir -p release_docs
          cp -r target/doc/* release_docs/
          
      - name: Generate release notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Generate automated release notes
          python scripts/generate_release_notes.py \
            --version "$VERSION" \
            --changelog CHANGELOG.md \
            --output release_notes.md
          
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: release-documentation
          path: |
            release_docs/
            release_notes.md
            README_generated.md

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, comprehensive-testing, cross-platform-release, performance-validation, security-audit, documentation]
    
    permissions:
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts/
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          
          # Collect all cross-platform builds
          find all-artifacts/release-* -name "*.tar.gz" -o -name "*.zip" | \
            xargs -I {} cp {} release-assets/
          
          # Add documentation
          cp -r all-artifacts/release-documentation/* release-assets/
          
          # Add performance and security reports
          cp all-artifacts/release-performance-validation/* release-assets/ || true
          cp all-artifacts/security-audit-results/* release-assets/ || true
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body_path: release-assets/release_notes.md
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            release-assets/*.tar.gz
            release-assets/*.zip
            release-assets/security_audit_*.json
            release-assets/performance_*.json
          generate_release_notes: true
          
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [create-release, validate-release]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Update performance baselines
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Update performance baselines for future releases
          if [ -f "all-artifacts/release-performance-validation/results.json" ]; then
            cp all-artifacts/release-performance-validation/results.json \
               performance_baselines/release_baseline_$VERSION.json
          fi
          
      - name: Trigger downstream updates
        run: |
          # Trigger updates in dependent projects or documentation sites
          echo "Release ${{ needs.validate-release.outputs.version }} completed successfully"
          
      - name: Performance tracking update
        run: |
          # Update long-term performance tracking database
          python scripts/update_release_tracking.py \
            --version "${{ needs.validate-release.outputs.version }}" \
            --artifacts all-artifacts/