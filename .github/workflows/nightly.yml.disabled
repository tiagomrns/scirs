name: Nightly Testing

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  RUST_BACKTRACE: full
  CARGO_TERM_COLOR: always

jobs:
  # Extended testing with edge cases
  extended-testing:
    name: Extended Test Suite
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev gfortran
        cargo install cargo-nextest

    - name: Run extended tests
      run: |
        # Run tests with additional features and stress tests
        cargo nextest run --all-features --run-ignored
        
        # Run property-based tests with more iterations
        QUICKCHECK_TESTS=10000 cargo test property_tests

    - name: Memory stress tests
      run: |
        # Run memory-intensive tests
        cargo test --release --features memory_efficient -- --ignored

    - name: Install Python for comprehensive analysis
      run: |
        python -m pip install --upgrade pip
        pip install psutil requests numpy matplotlib pandas seaborn

    - name: Comprehensive performance regression detection
      run: |
        # Run performance benchmarks with detailed monitoring
        cargo bench --all-features
        
        # Run comprehensive performance analysis
        cd scirs2-optim
        python scripts/ci_cd_performance_integration.py \
          --project-root . \
          --baseline-file nightly_performance_baseline.json \
          --output-format json \
          --output-file nightly_performance_results.json \
          --enable-regression-detection \
          --confidence-threshold 0.99 \
          --degradation-threshold 0.02 \
          --comprehensive-analysis \
          --generate-report

    - name: Security audit
      run: |
        cd scirs2-optim
        # Run comprehensive security audit using our built-in tools
        cargo run --example security_audit_demo

    - name: Memory leak detection
      run: |
        cd scirs2-optim
        # Run memory leak detection
        cargo run --example memory_leak_detector_demo

    - name: Cross-platform compatibility check
      run: |
        # Test cross-platform features
        cargo check --target x86_64-unknown-linux-gnu
        cargo check --target aarch64-unknown-linux-gnu
        cargo check --target x86_64-pc-windows-gnu
        cargo check --target x86_64-apple-darwin

    - name: Dependency vulnerability scan
      run: |
        cargo install cargo-audit
        cargo audit

    - name: Upload comprehensive results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nightly-analysis-results-${{ github.run_id }}
        path: |
          scirs2-optim/nightly_performance_results.json
          scirs2-optim/security_audit_report.md
          scirs2-optim/memory_analysis_report.json
        retention-days: 90

    - name: Create nightly report issue
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const title = `ðŸš¨ Nightly Build Failure - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Nightly Build Failure Report
          
          **Date**: ${new Date().toISOString()}
          **Run ID**: ${{ github.run_id }}
          **Commit**: ${{ github.sha }}
          
          ### Failure Details
          - Job failed during nightly comprehensive testing
          - Check the workflow logs and artifacts for detailed analysis
          
          ### Action Items
          - [ ] Review failure logs
          - [ ] Check performance regression results
          - [ ] Validate security audit results
          - [ ] Check memory leak detection results
          
          ### Artifacts
          - [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          
          This issue was automatically created by the nightly testing workflow.`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['nightly-failure', 'automated', 'priority-high']
          });
        if [ -f "performance_baselines/nightly_baseline.json" ]; then
          python3 scripts/check_performance_regression.py \
            --baseline performance_baselines/nightly_baseline.json \
            --current target/criterion/ \
            --threshold 5.0
        fi

  # Fuzzing
  fuzzing:
    name: Fuzz Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Run fuzz tests
      run: |
        # Run fuzzing on critical modules
        for module in scirs2-core scirs2-linalg scirs2-stats; do
          if [ -d "$module/fuzz" ]; then
            cd $module
            cargo fuzz run --sanitizer=address fuzz_target_1 -- -max_total_time=300
            cd ..
          fi
        done

  # Cross-compilation validation
  cross-compile-matrix:
    name: Cross-Compilation Matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
          - wasm32-unknown-unknown
          - wasm32-wasi

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      uses: taiki-e/install-action@v2
      with:
        tool: cross

    - name: Cross-compile
      run: |
        # Test cross-compilation for different targets
        if [ "${{ matrix.target }}" = "wasm32-unknown-unknown" ] || [ "${{ matrix.target }}" = "wasm32-wasi" ]; then
          # WASM targets - use no-default-features
          cargo build --target ${{ matrix.target }} --no-default-features
        else
          # Other targets - try with cross
          cross build --target ${{ matrix.target }} --no-default-features
        fi

  # Coverage reporting
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev gfortran
        cargo install cargo-llvm-cov

    - name: Generate coverage
      run: |
        # Generate coverage report for workspace
        cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info

    - name: Upload to codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true

  # Memory leak detection
  memory-leaks:
    name: Memory Leak Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust nightly
      uses: dtolnay/rust-toolchain@nightly

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev liblapack-dev gfortran valgrind

    - name: Run memory leak tests
      run: |
        # Run tests under valgrind
        cargo build --all-features
        
        # Test key executables for memory leaks
        for binary in target/debug/examples/*; do
          if [ -x "$binary" ]; then
            echo "Testing $binary for memory leaks"
            timeout 60 valgrind --leak-check=full --error-exitcode=1 "$binary" || true
          fi
        done

  # Documentation validation
  doc-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Validate documentation
      run: |
        # Check for broken links in documentation
        RUSTDOCFLAGS="-D rustdoc::broken_intra_doc_links" \
        cargo doc --workspace --all-features --no-deps

        # Check that all public APIs are documented
        RUSTDOCFLAGS="-D missing_docs" \
        cargo doc --workspace --all-features --no-deps

        # Validate README files
        find . -name "README.md" -exec echo "Checking {}" \; -exec markdownlint {} \; || true

  # Integration with external tools
  external-integration:
    name: External Tool Integration
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip
        pip3 install numpy scipy matplotlib

    - name: Test Python integration
      run: |
        # Test that Python can interact with Rust libraries
        python3 scripts/test_python_integration.py

    - name: Test SciPy compatibility
      run: |
        # Run SciPy compatibility tests
        cd benches
        python3 numpy_scipy_baseline.py
        bash run_performance_comparison.sh

  # Security audit with extended checks
  extended-security:
    name: Extended Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install security tools
      run: |
        cargo install cargo-audit cargo-deny cargo-geiger

    - name: Extended security audit
      run: |
        # Comprehensive security audit
        cargo audit
        cargo deny check
        
        # Check for unsafe code usage
        cargo geiger --all-features

        # Check for potential security issues in dependencies
        cargo audit --deny warnings

  # Notification
  nightly-report:
    name: Nightly Report
    runs-on: ubuntu-latest
    needs: [extended-testing, fuzzing, cross-compile-matrix, coverage, memory-leaks, doc-validation, external-integration, extended-security]
    if: always()

    steps:
    - name: Generate nightly report
      run: |
        echo "# SciRS2 Nightly Testing Report" > nightly_report.md
        echo "Date: $(date)" >> nightly_report.md
        echo "" >> nightly_report.md
        echo "## Test Results" >> nightly_report.md
        echo "- Extended Testing: ${{ needs.extended-testing.result }}" >> nightly_report.md
        echo "- Fuzzing: ${{ needs.fuzzing.result }}" >> nightly_report.md
        echo "- Cross-Compilation: ${{ needs.cross-compile-matrix.result }}" >> nightly_report.md
        echo "- Coverage: ${{ needs.coverage.result }}" >> nightly_report.md
        echo "- Memory Leaks: ${{ needs.memory-leaks.result }}" >> nightly_report.md
        echo "- Documentation: ${{ needs.doc-validation.result }}" >> nightly_report.md
        echo "- External Integration: ${{ needs.external-integration.result }}" >> nightly_report.md
        echo "- Security: ${{ needs.extended-security.result }}" >> nightly_report.md

    - name: Upload nightly report
      uses: actions/upload-artifact@v4
      with:
        name: nightly-report
        path: nightly_report.md